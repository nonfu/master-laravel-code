<?php

/**
 * Class Car
 */
class Car
{
    const WHEELS = 4;   // 汽车都是4个轮子
    protected $seats;         // 座位
    protected $doors;         // 门
    protected $engine;        // 发动机
    protected $brand;         // 品牌

    /**
     * Car constructor.
     * @param $seats
     * @param $doors
     * @param $engine
     * @param $brand
     */
    public function __construct($brand, $seats = 5, $doors = 4, $engine = 1)
    {
        $this->seats = $seats;
        $this->doors = $doors;
        $this->engine = $engine;
        $this->brand = $brand;
    }

    /**
     * @return mixed
     */
    public function getBrand()
    {
        return $this->brand;
    }

    /**
     * @param mixed $brand
     */
    public function setBrand($brand): void
    {
        $this->brand = $brand;
    }

    /**
     * 开车
     */
    public function drive()
    {
        echo "1.启动引擎..." . PHP_EOL;
        echo "2.挂D档..." . PHP_EOL;
        echo "3.放下手刹..." . PHP_EOL;
        echo "4.踩油门..." . PHP_EOL;
        printf("5.%s汽车已出发\n", $this->brand);
    }

    /**
     * 熄火
     */
    public function close()
    {
        echo "1.踩刹车..." . PHP_EOL;
        echo "2.挂P档..." . PHP_EOL;
        echo "3.拉起手刹..." . PHP_EOL;
        echo "4.关闭引擎..." . PHP_EOL;
        printf("5.%s汽车已熄火\n", $this->brand);
    }
}

class Benz extends Car
{
    private $customProp = '自定义属性';

    public function __construct($seats = 5, $doors = 4, $engine = 1)
    {
        $this->brand = '奔驰';
        // $this->setBrand('奔驰');  // 也可以通过该方法设置
        parent::__construct($this->brand, $seats, $doors, $engine);
    }

    private function customMethod()
    {
        echo "Call custom prop \$customProp: " . $this->customProp . PHP_EOL;
        echo "This is a custom method in Benz Class" . PHP_EOL;
    }

    // 重写父类实现
    public function drive()
    {
        echo $this->getBrand() . '汽车的启动流程:' . PHP_EOL;
        parent::drive(); // TODO: Change the autogenerated stub
    }
}

/*
$benz = new Benz();
$benz->drive();
*/

// 通过反射调用非 public 方法
/*
$method = new ReflectionMethod(Benz::class, 'customMethod');
$method->setAccessible(true);

$benz = new Benz();
$method->invoke($benz);*/

/*
$car = new Car("奔驰");
var_dump(Car::WHEELS);
var_dump($car->getBrand());
$car->drive();
$car->close();
*/

class TestCarDrive
{
    public function testDrive(Car $car)
    {
        $car->drive();
    }

    public function testBenzDrive(Benz $benz)
    {
        $benz->drive();
    }
}

// 初始化类对象
$bmw = new Car('宝马');
$benz = new Benz();
$test = new TestCarDrive();

// 测试子类转父类
$test->testDrive($benz);
// 测试父类转子类
$test->testBenzDrive($bmw);

